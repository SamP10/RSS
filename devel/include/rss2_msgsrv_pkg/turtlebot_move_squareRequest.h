// Generated by gencpp from file rss2_msgsrv_pkg/turtlebot_move_squareRequest.msg
// DO NOT EDIT!


#ifndef RSS2_MSGSRV_PKG_MESSAGE_TURTLEBOT_MOVE_SQUAREREQUEST_H
#define RSS2_MSGSRV_PKG_MESSAGE_TURTLEBOT_MOVE_SQUAREREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace rss2_msgsrv_pkg
{
template <class ContainerAllocator>
struct turtlebot_move_squareRequest_
{
  typedef turtlebot_move_squareRequest_<ContainerAllocator> Type;

  turtlebot_move_squareRequest_()
    : sideLength(0.0)
    , repetitions(0)  {
    }
  turtlebot_move_squareRequest_(const ContainerAllocator& _alloc)
    : sideLength(0.0)
    , repetitions(0)  {
  (void)_alloc;
    }



   typedef double _sideLength_type;
  _sideLength_type sideLength;

   typedef int32_t _repetitions_type;
  _repetitions_type repetitions;





  typedef boost::shared_ptr< ::rss2_msgsrv_pkg::turtlebot_move_squareRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::rss2_msgsrv_pkg::turtlebot_move_squareRequest_<ContainerAllocator> const> ConstPtr;

}; // struct turtlebot_move_squareRequest_

typedef ::rss2_msgsrv_pkg::turtlebot_move_squareRequest_<std::allocator<void> > turtlebot_move_squareRequest;

typedef boost::shared_ptr< ::rss2_msgsrv_pkg::turtlebot_move_squareRequest > turtlebot_move_squareRequestPtr;
typedef boost::shared_ptr< ::rss2_msgsrv_pkg::turtlebot_move_squareRequest const> turtlebot_move_squareRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::rss2_msgsrv_pkg::turtlebot_move_squareRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::rss2_msgsrv_pkg::turtlebot_move_squareRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace rss2_msgsrv_pkg

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'nav_msgs': ['/opt/ros/kinetic/share/nav_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'actionlib_msgs': ['/opt/ros/kinetic/share/actionlib_msgs/cmake/../msg'], 'rss2_msgsrv_pkg': ['/home/sam/catkin_ws/src/rss2_msgsrv_pkg/msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::rss2_msgsrv_pkg::turtlebot_move_squareRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::rss2_msgsrv_pkg::turtlebot_move_squareRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::rss2_msgsrv_pkg::turtlebot_move_squareRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::rss2_msgsrv_pkg::turtlebot_move_squareRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rss2_msgsrv_pkg::turtlebot_move_squareRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rss2_msgsrv_pkg::turtlebot_move_squareRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::rss2_msgsrv_pkg::turtlebot_move_squareRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bd481db479ec99c64e28864d3a771600";
  }

  static const char* value(const ::rss2_msgsrv_pkg::turtlebot_move_squareRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xbd481db479ec99c6ULL;
  static const uint64_t static_value2 = 0x4e28864d3a771600ULL;
};

template<class ContainerAllocator>
struct DataType< ::rss2_msgsrv_pkg::turtlebot_move_squareRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "rss2_msgsrv_pkg/turtlebot_move_squareRequest";
  }

  static const char* value(const ::rss2_msgsrv_pkg::turtlebot_move_squareRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::rss2_msgsrv_pkg::turtlebot_move_squareRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64 sideLength\n\
int32 repetitions\n\
";
  }

  static const char* value(const ::rss2_msgsrv_pkg::turtlebot_move_squareRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::rss2_msgsrv_pkg::turtlebot_move_squareRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.sideLength);
      stream.next(m.repetitions);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct turtlebot_move_squareRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::rss2_msgsrv_pkg::turtlebot_move_squareRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::rss2_msgsrv_pkg::turtlebot_move_squareRequest_<ContainerAllocator>& v)
  {
    s << indent << "sideLength: ";
    Printer<double>::stream(s, indent + "  ", v.sideLength);
    s << indent << "repetitions: ";
    Printer<int32_t>::stream(s, indent + "  ", v.repetitions);
  }
};

} // namespace message_operations
} // namespace ros

#endif // RSS2_MSGSRV_PKG_MESSAGE_TURTLEBOT_MOVE_SQUAREREQUEST_H
